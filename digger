local x=0;
local y=0;
local z=0;
local facing=0;
local checkpoints = {}

function myRight()
  turtle.turnRight()
  if facing == 0 then
    facing = 3
  else
    facing = facing - 1
  end
  return facing
end

function myLeft()
  turtle.turnLeft()
  if facing == 3 then
    facing = 0
  else
    facing = facing + 1
  end
  return facing
end

function setFacing(new_facing)
  local turns = facing - new_facing
  
  if math.abs( turns ) == 3 then
    turns = (turns -2)*-1
  end
  
  if turns > 0 then
    for i=1,turns,1 do
	  myRight()
	end
  elseif turns < 0 then
    for i=1,turns,1 do
  end
end

function redundantForward()
  while not turtle.forward() do
    if turtle.getFuelLevel() ~= "unlimited" and turtle.getFuelLevel() < 1 then
	  turtle.refuel()
	end
	if turtle.detect() then
      turtle.dig()
	end
  end
end

function myForward(count)
  for i=1,count,1 do
    redundantForward()
  end
end

function redundantUp()
  while not turtle.up() do
    if turtle.getFuelLevel() ~= "unlimited" and turtle.getFuelLevel() < 1 then
	  turtle.refuel()
	end
    if turtle.detectUp() then	
      turtle.digUp()
	end
  end
end

function myUp(count)
  for i=1,count,1 do
    redundantUp()
  end
end

function redundantDown()
  while not turtle.down() do
    if turtle.getFuelLevel() ~= "unlimited" and turtle.getFuelLevel() < 1 then
	  turtle.refuel()
	end
    if turtle.detectDown() then	
      turtle.digDown()
	end
  end
end

function myDown(count)
  for i=1,count,1 do
    redundantDown()
  end
end

function moveX(amount)
  if amount < 0 then
    setFacing( 1 )
  else
    setFacing( 3 )
  end
  myForward( math.abs(amount) )
  x = x + amount
end

function moveY(amount)
  if amount < 0 then
    setFacing( 2 )
  else
    setFacing( 0 )
  end
  myForward( math.abs(amount) )
  y = y + amount
end

function moveZ(amount)
  if amount < 0 then
    myDown( math.abs(amount) )
  else
    myUp( amount )
  end
  z = z + amount
end

function createCheckpoint()
  local p = { x = x, y = y, z = z }
  table.insert( checkpoints, p )
  return( table.getn( checkpoints ) )
end

function returnToCheckpoint(index)
  local p = checkpoints[index]
  moveX((p["x"]-x))
  moveY((p["y"]-y))
  moveZ((p["z"]-z))
end

function box(x1,y1,z1,x2,y2,z2,mode)

  --Assume start point is p1
  local cols  = x2 - x1
  local rows  = y2 - y1
  local tiers = z2 - z1
  
  local z_length = math.abs( tiers )
  local z_dir    = 1
  if tiers < 0 then
    z_dir = -1
  end
  
  local col_iter  = 0
  local tier_iter = 0
  
  for j=0,math.abs(tiers),1 do
    for i=0,math.abs(cols),1 do
      if math.fmod(col_iter,2) == 0 then
        moveY(rows)
	  else
	    moveY(rows*-1)
	  end
	  if i < math.abs(cols) then
	    if math.fmod(tier_iter,2) == 0 then
	      moveX(1)
		else
		  moveX(-1)
		end
      end
	  col_iter = col_iter + 1
    end
	if j < z_length then
	  moveZ(z_dir)
	end
	tier_iter = tier_iter + 1
  end
end

function staircase_a(levels, direction, stepsize)
  for i=0,levels,1 do
    local move_amt = stepsize
    if i > ( levels - stepsize ) then
	  move_amt = stepsize - ( i - (levels - stepsize) )
	end
    moveY(move_amt)
	if i < levels then
      moveY((move_amt-1)*-1)
	  moveZ(direction)
	end
  end
end

function main()

  write("Trying base..hit enter to start\n")
  read()
  
  staircase_a(6,-1,5)
  moveY(-5)
  cp1 = createCheckpoint()
  moveX(-2)
  setFacing(0)
  box(0,0,0,4,9,3)
  returnToCheckpoint(cp1)
  staircase_a(6,-1,5)
  moveY(-5)
  cp2 = createCheckpoint()
  moveX(-2)
  setFacing(0)
  box(0,0,0,4,9,3)
  returnToCheckpoint(cp2)
  
  write("done\n")
end

main()
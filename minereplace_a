local chamber_height=4
local chamber_width=5
local chamber_length=10

function redundantForward()
  while not turtle.forward() do
    turtle.dig()
  end
end

function myForward(count)
  for i=1,count,1 do
    redundantForward()
  end
end

function redundantUp()
  while not turtle.up() do
    turtle.digUp()
  end
end

function myUp(count)
  for i=1,count,1 do
    redundantUp()
  end
end

function digLeft(count)
  turtle.turnLeft()
  while turtle.dig() do
  end
  turtle.turnRight()
end

function digRight()
  turtle.turnRight()
  while turtle.dig() do
  end
  turtle.turnLeft()
end

function digChamber()
  write("Digging first pass\n")
  for c=1,chamber_length,1 do
    myUp()
	turtle.digDown()
    digLeft()
	digRight()
	if c ~= chamber_length then
	  myForward()
	end
  end
  
  write("Connecting...\n")
  turtle.down()
  turtle.turnLeft()
  myForward(2)
  
  turtle.turnLeft()
  
  write("Digging lower left flank\n")
  for c=1,chamber_length,1 do
    myUp()
    digLeft()
	if c ~= chamber_length then
	  myForward()
	end
  end

  write("Connecting...\n")  
  turtle.turnLeft()
  
  myForward()
  myForward()
  myForward()
  myForward()
  turtle.turnLeft()
 
  write("Digging lower right flank\n") 
  for c=1,chamber_length,1 do
    turtle.digUp()
    digLeft()
	if c ~= chamber_length then
	  myForward()
	end
  end

  write("Connecting...\n")
  myUp()
  myUp()
  myUp()
  turtle.turnLeft()
  turtle.turnLeft()
  
  write("Digging upper right flank\n") 
  for c=1,chamber_length,1 do
    turtle.digDown()
    digRight()
	if c ~= chamber_length then
	  myForward()
    end
  end
  
  write("Connecting...\n")  
  turtle.turnRight()
  myForward()
  myForward()
  myForward()
  myForward()
  turtle.turnRight()
  
  write("Digging upper left flank\n") 
  for c=1,chamber_length,1 do
    turtle.dig()
    turtle.digDown()
    digRight()
	if c ~= chamber_length then
	  myForward()
	end
  end
  
  write("Connecting...\n")
  turtle.turnRight()
  myForward()
  turtle.digDown()
  turtle.down()
  turtle.turnRight()
  
  for c=1,chamber_length,1 do
    myForward()
  end
  
  write("Connecting...\n")
  turtle.turnLeft()
  myForward()
  myForward()
  turtle.turnLeft()
  
  for c=1,chamber_length,1 do
    myForward()
  end
  
  write("Returning...\n")
  turtle.turnLeft()
  turtle.turnLeft()
  for c=1,chamber_length,1 do
    myForward()
  end
  turtle.down()
  turtle.down()
  turtle.turnRight()
  myForward()
  turtle.turnRight()
  write("Chamber finished.\n")
end

function main()
  write("How deep?")
  local levels = tonumber( read() )

  write("How many chambers?")
  local chambers = tonumber( read() )

  write("Chamber start level?")
  local chamber_start_level = tonumber( read() )

  write("Chamber spacing?")
  local chamber_spacing = tonumber( read() )

  for i=1,levels,1 do
    for j=1,5,1 do
      myForward()
    end
  
    for k=1,4,1 do
      turtle.back()
    end
  
    turtle.digDown()
    turtle.down()
  
    if( i == chamber_start_level ) then
      digChamber()
    end
  end
end

main()

